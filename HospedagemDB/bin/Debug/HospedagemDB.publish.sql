/*
Deployment script for MinimalApiHospedagemDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MinimalApiHospedagemDB"
:setvar DefaultFilePrefix "MinimalApiHospedagemDB"
:setvar DefaultDataPath "C:\Users\Gustavo\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Gustavo\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Chale]...';


GO
CREATE TABLE [dbo].[Chale] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [Localizacao]       NVARCHAR (300) NOT NULL,
    [Capacidade]        TINYINT        NOT NULL,
    [ValorAltaEstacao]  INT            NOT NULL,
    [ValorBaixaEstacao] INT            NOT NULL,
    CONSTRAINT [PK_Chale] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[Chale].[IX_Chale_Capacidade]...';


GO
CREATE NONCLUSTERED INDEX [IX_Chale_Capacidade]
    ON [dbo].[Chale]([Capacidade] ASC);


GO
PRINT N'Creating Table [dbo].[ChaleItem]...';


GO
CREATE TABLE [dbo].[ChaleItem] (
    [ChaleId] INT NOT NULL,
    [ItemId]  INT NOT NULL,
    CONSTRAINT [PK_ChaleItem] PRIMARY KEY CLUSTERED ([ChaleId] ASC, [ItemId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Cliente]...';


GO
CREATE TABLE [dbo].[Cliente] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [Nome]       NVARCHAR (80)  NOT NULL,
    [Rg]         VARCHAR (15)   NOT NULL,
    [Endereco]   NVARCHAR (100) NOT NULL,
    [Bairro]     NVARCHAR (50)  NOT NULL,
    [Cidade]     NVARCHAR (30)  NOT NULL,
    [Estado]     VARCHAR (2)    NOT NULL,
    [CEP]        VARCHAR (10)   NOT NULL,
    [Nascimento] NVARCHAR (10)  NOT NULL,
    CONSTRAINT [PK_Cliente] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_Cliente_Rg] UNIQUE NONCLUSTERED ([Rg] ASC)
);


GO
PRINT N'Creating Index [dbo].[Cliente].[IX_Cliente_Rg]...';


GO
CREATE NONCLUSTERED INDEX [IX_Cliente_Rg]
    ON [dbo].[Cliente]([Rg] ASC);


GO
PRINT N'Creating Table [dbo].[Hospedagem]...';


GO
CREATE TABLE [dbo].[Hospedagem] (
    [Id]         INT      NOT NULL,
    [ChaleId]    INT      NOT NULL,
    [ClienteId]  INT      NOT NULL,
    [Estado]     BIT      NOT NULL,
    [DataInicio] DATETIME NOT NULL,
    [DataFim]    DATETIME NOT NULL,
    [QtdPessoas] TINYINT  NOT NULL,
    [Desconto]   TINYINT  NOT NULL,
    [ValorFinal] INT      NOT NULL,
    CONSTRAINT [PK_Hospedagem] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[HospedagemServico]...';


GO
CREATE TABLE [dbo].[HospedagemServico] (
    [ServicoId]    INT      NOT NULL,
    [HospedagemId] INT      NOT NULL,
    [DataServico]  DATETIME NOT NULL,
    [ValorServico] INT      NULL,
    CONSTRAINT [PK_HospedagemServico] PRIMARY KEY CLUSTERED ([ServicoId] ASC, [HospedagemId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Item]...';


GO
CREATE TABLE [dbo].[Item] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Nome]      NVARCHAR (50) NOT NULL,
    [Descricao] TEXT          NOT NULL,
    CONSTRAINT [PK_Item] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[Item].[IX_Item_Nome]...';


GO
CREATE NONCLUSTERED INDEX [IX_Item_Nome]
    ON [dbo].[Item]([Nome] ASC);


GO
PRINT N'Creating Table [dbo].[Servico]...';


GO
CREATE TABLE [dbo].[Servico] (
    [Id]    INT          IDENTITY (1, 1) NOT NULL,
    [Nome]  VARCHAR (30) NOT NULL,
    [Valor] INT          NOT NULL,
    CONSTRAINT [PK_Servico] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Telefone]...';


GO
CREATE TABLE [dbo].[Telefone] (
    [Numero]       NVARCHAR (20) NOT NULL,
    [ClienteId]    INT           NOT NULL,
    [TipoTelefone] VARCHAR (10)  NOT NULL,
    CONSTRAINT [PK_Telefone] PRIMARY KEY CLUSTERED ([Numero] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Hospedagem]...';


GO
ALTER TABLE [dbo].[Hospedagem]
    ADD DEFAULT (GETDATE()) FOR [DataInicio];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Hospedagem]...';


GO
ALTER TABLE [dbo].[Hospedagem]
    ADD DEFAULT (GETDATE()) FOR [DataFim];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HospedagemServico]...';


GO
ALTER TABLE [dbo].[HospedagemServico]
    ADD DEFAULT (GETDATE()) FOR [DataServico];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospedagem_Chale]...';


GO
ALTER TABLE [dbo].[Hospedagem]
    ADD CONSTRAINT [FK_Hospedagem_Chale] FOREIGN KEY ([ChaleId]) REFERENCES [dbo].[Chale] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Hospedagem_Cliente]...';


GO
ALTER TABLE [dbo].[Hospedagem]
    ADD CONSTRAINT [FK_Hospedagem_Cliente] FOREIGN KEY ([ClienteId]) REFERENCES [dbo].[Cliente] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Telefone_Cliente]...';


GO
ALTER TABLE [dbo].[Telefone]
    ADD CONSTRAINT [FK_Telefone_Cliente] FOREIGN KEY ([ClienteId]) REFERENCES [dbo].[Cliente] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spChale_Delete]...';


GO
CREATE PROCEDURE [dbo].[spChale_Delete]
	@Id int
AS
begin
	delete
	from [dbo].[Chale]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spChale_Get]...';


GO
CREATE PROCEDURE [dbo].[spChale_Get]
	@Id int
AS
begin
	select 
		*
	from [dbo].[Chale]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spChale_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spChale_GetAll]
AS
begin
	select 
		*
	from [dbo].[Chale];
end
GO
PRINT N'Creating Procedure [dbo].[spChale_Insert]...';


GO
CREATE PROCEDURE [dbo].[spChale_Insert]
	@Localizacao NVARCHAR(300),
    @Capacidade TINYINT,
    @ValorAltaEstacao INT,
    @ValorBaixaEstacao INT   
AS
begin
	insert into [dbo].[Chale]
	(Localizacao,
    Capacidade,
    ValorAltaEstacao,
    ValorBaixaEstacao)
    values
    (@Localizacao,
    @Capacidade,
    @ValorAltaEstacao,
    @ValorBaixaEstacao);

end
GO
PRINT N'Creating Procedure [dbo].[spChale_Update]...';


GO
CREATE PROCEDURE [dbo].[spChale_Update]
	@Localizacao NVARCHAR(300),
    @Capacidade TINYINT,
    @ValorAltaEstacao INT,
    @ValorBaixaEstacao INT,  
    @Id INT
AS
begin
	update [dbo].[Chale]
	set 
    Localizacao = @Localizacao,
    Capacidade = @Capacidade,
    ValorAltaEstacao = @ValorAltaEstacao,
    ValorBaixaEstacao = @ValorBaixaEstacao    
    where
    Id = @Id;

end
GO
PRINT N'Creating Procedure [dbo].[spCliente_Delete]...';


GO
CREATE PROCEDURE [dbo].[spCliente_Delete]
	@Id int
AS
begin
	delete
	from [dbo].[Cliente]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spCliente_Get]...';


GO
CREATE PROCEDURE [dbo].[spCliente_Get]
	@Id int
AS
begin
	select 
		*
	from [dbo].[Cliente]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spCliente_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spCliente_GetAll]
AS
begin
	select 
		*
	from [dbo].[Cliente];
end
GO
PRINT N'Creating Procedure [dbo].[spCliente_Insert]...';


GO
CREATE PROCEDURE [dbo].[spCliente_Insert]
	@Nome NVARCHAR(80),
    @Rg VARCHAR(15),
    @Endereco NVARCHAR(100),
    @Bairro NVARCHAR(50),   
    @Cidade NVARCHAR(30),
    @Estado VARCHAR(2),
    @CEP VARCHAR(10),
    @Nascimento NVARCHAR(10) 
AS
begin
	insert into [dbo].[Cliente]
	(Nome,
    Rg,
    Endereco,
    Bairro,   
    Cidade,
    Estado,
    CEP,
    Nascimento)
    values
    (@Nome,
    @Rg,
    @Endereco,
    @Bairro,   
    @Cidade,
    @Estado,
    @CEP,
    @Nascimento);

end
GO
PRINT N'Creating Procedure [dbo].[spCliente_Update]...';


GO
CREATE PROCEDURE [dbo].[spCliente_Update]
	@Id int,
    @Nome NVARCHAR(80),
    @Rg VARCHAR(15),
    @Endereco NVARCHAR(100),
    @Bairro NVARCHAR(50),   
    @Cidade NVARCHAR(30),
    @Estado VARCHAR(2),
    @CEP VARCHAR(10),
    @Nascimento NVARCHAR(10) 
AS
begin
	update [dbo].[Cliente]
	set 
    Nome = @Nome,
    Rg = @Rg,
    Endereco = @Endereco,
    Bairro = @Bairro,    
    Cidade = @Cidade, 
    Estado = @Estado,
    CEP = @CEP,
    Nascimento = @Nascimento
    where
    Id = @Id;

end
GO
PRINT N'Creating Procedure [dbo].[spItem_Delete]...';


GO
CREATE PROCEDURE [dbo].[spItem_Delete]
	@Id int
AS
begin
	delete
	from [dbo].[Item]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spItem_Get]...';


GO
CREATE PROCEDURE [dbo].[spItem_Get]
	@Id int
AS
begin
	select 
		*
	from [dbo].[Item]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spItem_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spItem_GetAll]
AS
begin
	select 
		*
	from [dbo].[Item];
end
GO
PRINT N'Creating Procedure [dbo].[spItem_Insert]...';


GO
CREATE PROCEDURE [dbo].[spItem_Insert]
	@Nome NVARCHAR(50),
    @Descricao TEXT 
AS
begin
	insert into [dbo].[Item]
	(Nome,
    Descricao)
    values
    (@Nome,
    @Descricao);

end
GO
PRINT N'Creating Procedure [dbo].[spItem_Update]...';


GO
CREATE PROCEDURE [dbo].[spItem_Update]
	@Id int,
    @Nome NVARCHAR(50),
    @Descricao TEXT
AS
begin
	update [dbo].[Item]
	set 
    Nome = @Nome,
    Descricao = @Descricao   
    where
    Id = @Id;

end
GO
PRINT N'Creating Procedure [dbo].[spServico_Delete]...';


GO
CREATE PROCEDURE [dbo].[spServico_Delete]
	@Id int
AS
begin
	delete
	from [dbo].[Servico]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spServico_Get]...';


GO
CREATE PROCEDURE [dbo].[spServico_Get]
	@Id int
AS
begin
	select 
		*
	from [dbo].[Servico]
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spServico_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spServico_GetAll]
AS
begin
	select 
		*
	from [dbo].[Servico];
end
GO
PRINT N'Creating Procedure [dbo].[spServico_Insert]...';


GO
CREATE PROCEDURE [dbo].[spServico_Insert]
	@Nome NVARCHAR(30),
    @Valor INT 
AS
begin
	insert into [dbo].[Servico]
	(Nome,
    Valor)
    values
    (@Nome,
    @Valor);

end
GO
PRINT N'Creating Procedure [dbo].[spServico_Update]...';


GO
CREATE PROCEDURE [dbo].[spServico_Update]
	@Id int,
    @Nome NVARCHAR(30),
    @Valor INT
AS
begin
	update [dbo].[Servico]
	set 
    Nome = @Nome,
    Valor = @Valor
    where
    Id = @Id;

end
GO
PRINT N'Creating Procedure [dbo].[spTelefone_Delete]...';


GO
CREATE PROCEDURE [dbo].[spTelefone_Delete]
	@Numero int
AS
begin
	delete
	from [dbo].[Telefone]
	where Numero = @Numero;
end
GO
PRINT N'Creating Procedure [dbo].[spTelefone_Get]...';


GO
CREATE PROCEDURE [dbo].[spTelefone_Get]
    @Id int
AS
begin
	SELECT
    [dbo].[Telefone].[Numero],
    [dbo].[Cliente].[Id],
    [dbo].[Cliente].[Nome]
FROM 
    [dbo].[Telefone]
    INNER JOIN [dbo].[Cliente]
     ON [dbo].[Telefone].[ClienteId] = [dbo].[Cliente].[Id]
     where [dbo].[Cliente].[Id] = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spTelefone_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spTelefone_GetAll]
AS
begin
	SELECT
    [dbo].[Telefone].[Numero],
    [dbo].[Cliente].[Id],
    [dbo].[Cliente].[Nome]
FROM 
    [dbo].[Telefone]
    INNER JOIN [dbo].[Cliente]
     ON [dbo].[Telefone].[ClienteId] = [dbo].[Cliente].[Id]
end
GO
PRINT N'Creating Procedure [dbo].[spTelefone_Insert]...';


GO
CREATE PROCEDURE [dbo].[spTelefone_Insert]
	@ClienteId int,
    @Numero NVARCHAR(20),
    @TipoTelefone VARCHAR(10)
AS
begin
	insert into [dbo].[Telefone]
	(Numero,
    ClienteId,
    TipoTelefone)
    values
    (@Numero,
    @ClienteId,
    @TipoTelefone);
end
GO
PRINT N'Creating Procedure [dbo].[spTelefone_Update]...';


GO
CREATE PROCEDURE [dbo].[spTelefone_Update]
	@ClienteId int,
    @Numero NVARCHAR(20),
    @TipoTelefone VARCHAR(10)
AS
begin
	update [dbo].[Telefone]
	set 
    Numero = @Numero,
    TipoTelefone = @TipoTelefone
    where
    ClienteId = @ClienteId;

end
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
